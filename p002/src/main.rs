// Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
// By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

// Implement iterator over Fibonacci sequence
struct Fibonacci {
    a: u64,
    b: u64,
}

impl Default for Fibonacci {
    fn default() -> Self {
        Self { a: 1, b: 2 }
    }
}

impl Iterator for Fibonacci {
    type Item = u64;

    fn next(&mut self) -> Option<Self::Item> {
        let r = self.a;
        self.a = self.b;
        self.b += r;
        // Return None when Fibonacci number exeeds four million
        if r > 4_000_000 {
            None
        } else {
            Some(r)
        }
    }
}

fn main() {
    println!(
        "{}",
        Fibonacci::default().filter(|x| x % 2 == 0).sum::<u64>()
    );
}
